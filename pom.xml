<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.objectstyle</groupId>
	<artifactId>link-rest-dropwizard</artifactId>
	<version>1.0-SNAPSHOT</version>

	<name>Webapp: link-rest-dropwizard</name>
	<description>A simple project demonstrating the use of LinkRest with DropWizard</description>

	<properties>

		<!-- standard Maven properties -->

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- Custom properties (mostly framework versions) -->

		<link-rest-version>1.20</link-rest-version>
		<cayenne-version>4.0.M2</cayenne-version>
		<dropwizard.version>0.9.1</dropwizard.version>

		<!-- Aligning with Dropwizard versions of dependencies -->
		<slf4j-version>1.7.12</slf4j-version>
		<jackson-version>2.6.3</jackson-version>
	</properties>

	<scm>
		<connection>scm:git:https://github.com/andrus/link-rest-cms-demo.git</connection>
		<developerConnection>scm:git:ssh://git@github.com:andrus/link-rest-dropwizard.git</developerConnection>
		<url>https://github.com/andrus/link-rest-dropwizard</url>
		<tag>HEAD</tag>
	</scm>

	<dependencyManagement>
		<dependencies>

			<dependency>
				<groupId>com.nhl.link.rest</groupId>
				<artifactId>link-rest</artifactId>
				<version>${link-rest-version}</version>
			</dependency>

			<dependency>
				<groupId>io.dropwizard</groupId>
				<artifactId>dropwizard-core</artifactId>
				<version>${dropwizard.version}</version>
			</dependency>

			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-core</artifactId>
				<version>${jackson-version}</version>
			</dependency>

			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-databind</artifactId>
				<version>${jackson-version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.cayenne</groupId>
				<artifactId>cayenne-server</artifactId>
				<version>${cayenne-version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.derby</groupId>
				<artifactId>derby</artifactId>
				<version>10.10.1.1</version>
			</dependency>

			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j-version}</version>
			</dependency>

			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>jcl-over-slf4j</artifactId>
				<version>${slf4j-version}</version>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<dependencies>

		<!-- required runtime dependencies -->
		<dependency>
			<groupId>com.nhl.link.rest</groupId>
			<artifactId>link-rest</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.cayenne</groupId>
			<artifactId>cayenne-server</artifactId>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>io.dropwizard</groupId>
			<artifactId>dropwizard-core</artifactId>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<scope>compile</scope>
		</dependency>

		<!-- providing slf4j binding for use with unit tests that require SLF and for clean Cayenne output. -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>org.apache.derby</groupId>
			<artifactId>derby</artifactId>
		</dependency>

		<!-- unit test deps -->
		<!-- TODO -->

	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.2</version>
					<configuration>
						<source>1.8</source>
						<target>1.8</target>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>2.4</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-war-plugin</artifactId>
					<version>2.6</version>
					<configuration>
						<failOnMissingWebXml>false</failOnMissingWebXml>
						<warName>link-rest-cms-demo</warName>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.cayenne.plugins</groupId>
					<artifactId>maven-cayenne-plugin</artifactId>
					<version>${cayenne-version}</version>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>

			<!-- Generate Cayenne classes during Maven build. Alternatively this can done from CayenneModeler GUI. -->
			<plugin>
				<groupId>org.apache.cayenne.plugins</groupId>
				<artifactId>maven-cayenne-plugin</artifactId>
				<configuration>
					<map>${project.basedir}/src/main/resources/datamap.map.xml</map>
				</configuration>
				<executions>
					<execution>
						<id>default-cli</id>
						<goals>
							<goal>cgen</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>2.3</version>
				<configuration>
					<createDependencyReducedPom>true</createDependencyReducedPom>
					<filters>
						<filter>
							<artifact>*:*</artifact>
							<excludes>
								<exclude>META-INF/*.SF</exclude>
								<exclude>META-INF/*.DSA</exclude>
								<exclude>META-INF/*.RSA</exclude>
							</excludes>
						</filter>
					</filters>
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>org.objectstyle.linkrest.cms.DWApplication</mainClass>
								</transformer>
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
